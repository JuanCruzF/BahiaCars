@page "/"
@implements IDisposable
@inject HttpClient Http

@using Public.Frontend.Components
@using Public.Frontend.Dtos

<PageTitle>BahiaCars - Vehículos</PageTitle>

<div class="min-h-screen bg-gray-900 text-white">
    <div class="container mx-auto px-4 py-8">

        <div class="text-center mb-8">
            <h1 class="text-4xl font-bold mb-2">BahíaCars - Concesionaria</h1>
            <p class="text-gray-400">Explora nuestro inventario completo</p>
            <div class="mt-6 max-w-lg mx-auto">
                <input type="text"
                       placeholder="Buscar por marca, modelo, año..."
                       class="w-full px-4 py-3 bg-gray-800 border border-gray-700 rounded-full text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500"
                       @bind="SearchTerm" @bind:event="oninput" />
            </div>
        </div>

        @if (featuredVehicles != null && featuredVehicles.Any())
        {
            <div class="mb-12">
                <h2 class="text-3xl font-bold text-white mb-6 text-center sm:text-left">Vehículos Destacados</h2>
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                    @foreach (var vehicle in featuredVehicles)
                    {
                        <VehicleCard Vehicle="vehicle" />
                    }
                </div>
            </div>
            <hr class="border-gray-700 my-8" />
        }

        @if (latestVehicles != null && latestVehicles.Any())
        {
            <div class="mb-12">
                <h2 class="text-3xl font-bold text-white mb-6 text-center sm:text-left">Últimos Ingresos</h2>
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                    @foreach (var vehicle in latestVehicles)
                    {
                        <VehicleCard Vehicle="vehicle" />
                    }
                </div>
            </div>
            <hr class="border-gray-700 my-8" />
        }

        <h2 class="text-3xl font-bold text-white mb-6 text-center sm:text-left">Catálogo Completo</h2>

        <div class="mb-8 p-4 bg-gray-800 rounded-lg flex flex-col sm:flex-row gap-4">
            <select @bind="SelectedBrand" class="flex-1 bg-gray-700 p-2 rounded">
                <option value="">-- Todas las Marcas --</option>
                @if (brands != null)
                {
                    @foreach(var brand in brands) {
                        <option value="@brand">@brand</option>
                    }
 }
            </select>
            <select @bind="SelectedVehicleType" class="flex-1 bg-gray-700 p-2 rounded">
                <option value="">-- Todos los Tipos --</option>
                @if (vehicleTypes != null)
                {
                    @foreach(var type in vehicleTypes) {
                        <option value="@type">@type</option>
                    }
 }
            </select>
            <select @bind="SelectedYear" class="flex-1 bg-gray-700 p-2 rounded">
                <option value="">-- Todos los Años --</option>
                @if (availableYears != null)
                {
                    @foreach(var year in availableYears) {
                        <option value="@year">@year</option>
                    }
 }
            </select>

        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p class="text-center text-red-400">@errorMessage</p>
        }
        else if (currentItems == null)
        {
            <p class="text-center text-gray-400 py-16">Cargando...</p>
        }
        else if (!currentItems.Any())
        {
            <p class="text-center text-gray-400 py-16">No se encontraron vehículos que coincidan con los criterios.</p>
        }
        else
        {
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                @foreach (var vehicle in currentItems)
                {
                    <VehicleCard Vehicle="vehicle" />
                }
            </div>

            @if (!IsSearchingOrFiltering)
            {
                <Pagination PagedResult="pagedResult" OnPageChange="GoToPage" />
            }
        }
    </div>
</div>

@code {
    private List<VehicleResponse>? featuredVehicles; // Para /api/vehicles/featured
    private List<VehicleResponse>? latestVehicles;   // Para /api/vehicles/latest
    private List<VehicleResponse>? currentItems;     // Para la lista principal (paginada o de búsqueda)
    private PagedResult<VehicleResponse>? pagedResult;
    private string? errorMessage;
    private int currentPage = 1;

    private string _searchTerm = string.Empty;
    private string _selectedBrand = string.Empty;
    private string _selectedVehicleType = string.Empty;
    private string _selectedYear = string.Empty;
    private System.Threading.Timer? _debounceTimer;
    private List<string>? brands;
    private List<string>? vehicleTypes;
    private List<int>? availableYears;

    private bool IsSearchingOrFiltering => !string.IsNullOrWhiteSpace(_searchTerm) || !string.IsNullOrWhiteSpace(_selectedBrand) || !string.IsNullOrWhiteSpace(_selectedVehicleType) || !string.IsNullOrWhiteSpace(_selectedYear);

    private string SearchTerm { get => _searchTerm; set { _searchTerm = value; _debounceTimer?.Change(300, System.Threading.Timeout.Infinite); } }
    private string SelectedBrand { get => _selectedBrand; set { _selectedBrand = value; ApplySearchAndFilters(); } }
    private string SelectedVehicleType { get => _selectedVehicleType; set { _selectedVehicleType = value; ApplySearchAndFilters(); } }
    private string SelectedYear { get => _selectedYear; set { _selectedYear = value; ApplySearchAndFilters(); } }

    protected override async Task OnInitializedAsync()
    {
        _debounceTimer = new System.Threading.Timer(async _ => await ApplySearchAndFilters(), null, -1, -1);
        await Task.WhenAll(
            LoadFilterOptions(),
            LoadFeaturedVehicles(), // Carga los destacados
            LoadLatestVehicles(),   // Carga los últimos ingresos
            ApplySearchAndFilters() // Carga la lista principal
        );
    }

    private async Task LoadFeaturedVehicles()
    {
        try
        {
            featuredVehicles = await Http.GetFromJsonAsync<List<VehicleResponse>>("api/vehicles/featured");
        }
        catch (Exception) { /* Falla silenciosamente */ }
    }

    private async Task LoadLatestVehicles()
    {
        try
        {
            latestVehicles = await Http.GetFromJsonAsync<List<VehicleResponse>>("api/vehicles/latest");
        }
        catch (Exception) { /* Falla silenciosamente */ }
    }

    private async Task LoadFilterOptions()
    {
        try
        {
            brands = await Http.GetFromJsonAsync<List<string>>("api/filters/brands");
            vehicleTypes = await Http.GetFromJsonAsync<List<string>>("api/filters/vehicle-types");
            availableYears = await Http.GetFromJsonAsync<List<int>>("api/filters/years");
        }
        catch (Exception) { errorMessage = "No se pudieron cargar las opciones de filtro."; }
    }

    private async Task ApplySearchAndFilters(int pageNumber = 1)
    {
        errorMessage = null;
        currentPage = pageNumber;
        currentItems = null;
        await InvokeAsync(StateHasChanged);

        try
        {
            if (!IsSearchingOrFiltering)
            {
                pagedResult = await Http.GetFromJsonAsync<PagedResult<VehicleResponse>>($"api/vehicles?pageNumber={currentPage}&pageSize=8");
                currentItems = pagedResult?.Items;
            }
            else
            {
                var query = Uri.EscapeDataString(SearchTerm);
                var filterList = new List<string>();

                if (!string.IsNullOrWhiteSpace(SelectedBrand)) { filterList.Add($"brand = '{SelectedBrand}'"); }
                if (!string.IsNullOrWhiteSpace(SelectedVehicleType))
                {
                    if (Enum.TryParse<VehicleType>(SelectedVehicleType, out var vt)) { filterList.Add($"vehicleType = {(int)vt}"); }
                }
                if (!string.IsNullOrWhiteSpace(SelectedYear)) { filterList.Add($"year = {SelectedYear}"); }

                var filterString = Uri.EscapeDataString(string.Join(" AND ", filterList));

                var searchResults = await Http.GetFromJsonAsync<List<VehicleResponse>>($"api/search?query={query}&filter={filterString}");
                currentItems = searchResults;
                pagedResult = null;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Ocurrió un error al obtener los vehículos.";
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task GoToPage(int pageNumber) => await ApplySearchAndFilters(pageNumber);

    public void Dispose() => _debounceTimer?.Dispose();
}